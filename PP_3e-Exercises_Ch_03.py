# "Python Programming: An Introduction to Computer Science"
# by John Zelle, 3rd Ed.
# Chapter 1: Computers and Programs
# End-of-Chapter Exercises
#
# REVIEW QUESTIONS
#
# True/False
#1. Information that is stored and manipulated by computers is called data. T
#2. Since floating-point numbers are extremely accurate, they should generally be used instead of ints. F
#3. Operations like addition and subtraction are defined in the math library. Tx  F
#4. The number of possible arrangements of n items is equal to n!. Fx T
#5. The sqrt function computes the squirt of a number. F
#6. The float data type is identical to the mathematical concept of a real number. F
#7. Computers represent numbers using base-2 (binary) representations. T
#8. A hardware float can represent a larger range of values than a hardware int. Fx T 
#9. Type conversion functions such as float are a safe alternative to eval for getting a number as user input.T
#10. In Python, 4+5 produces the same result type as 4. 0+5. 0.  F
#
#Multiple Choice 
#1. Which of the following is not a built-in Python data type? C
#a) int b) float c) rational d) string 
#2. Which of the following is not a built-in operation? D
#a)+ b)% c) abs () d) sqrt
#3. In order to use functions in the math library, a program must include D
#a) a comment b) a loop c) an operator d) an import statement 
#4. The value of 4! is B
#a) 9 b) 24 c) 41 d) 120 
#5. The most appropriate data type for storing the value of pi is B
#a) int b) float c) irrational d) string 
#6. The number of distinct values that can be represented using 5 bits is C
#a) 5 b) 10 c) 32 d) 50 
#7. In a mixed-type expression involving ints and floats, Python will convert D?
#a) floats to ints b) ints to strings 
#c) both floats and ints to strings d) ints to floats 
#8. Which of the following is not a Python type-conversion function?D
#a) float b) round c) int d) abs
#9. The pattern used to compute factorials is A
#a) accumulator b) input, process, output 
#c) counted loop d) plaid 
#10. In modern Python, an int value that grows larger than the underlying hardware int D
#a) causes an overflow b) converts to float 
#c) breaks the computer d) uses more memory 
#

#Discussion 
#1. Show the result of evaluating each expression. Be sure that the value is in the proper form to indicate its type (int or float). If the expression is 
#illegal, explain why.
#								Expected value     |    Actual value
#a) 4.0 / 10.0 + 3.5 * 2         	          7.4  | 7.4
#b) 10 % 4 + 6 / 2								 5 | 5.0
#c) abs (4 - 20 // 3) **3						 8 | 8		
#d) sqrt (4.5 - 5.0) + 7 * 3	 math domain error | math domain error
#e) 3 * 10 // 3 + 10 % 3 						10 |11?
#f) 3 ** 3 										27 | 27

#2. Translate each of the following mathematical expressions into an equivalent Python expression. You may assume that the math library has been imported 
#(via import math). 
#  2. Translate each of the following mathematical expressions into an equivalent Python expression. You may assume that the math
#     library has been imported (via import math).
#     a) (3 + 4)(5)                    -> (3 + 4) * 5   
#     b) (n(n-1))/2                    -> (n * (n-1)) / 2    
#     c) 4pir^2                        -> 4 * math.pi *r ** 2    
#     d) sqrt(r(cosa)^2 + r(sinb)^2)   -> math.sqrt(r * (math.cos(a)) ** 2 + r * (math.sin(b) **2))
#     e) (y2 - y1) / (x2 - x1)         -> (y2 - y1) / (x2 - x1) 
#  3. Show the sequence of numbers that would be generated by each of the following range expressions.
#     a) range(5)                      -> [0, 1, 2, 3, 4]
#     b) range(3,5)                    -> [3, 4]
#     c) range(4,13,3)                 -> [4, 7, 10]
#     d) range(15,5,-2)                -> [15, 13, 11, 9, 7]
#     e) range(5,3)                    -> []
#
#  4. Show the output that would be generated by each of the following program fragments.
#								Expected value     |    Actual value
#
#     a) for i in range(1,11):	
#            print(i*i)
#													1
#													4  5
#													9  14
#													16 30
#													25  55
#													36  91
#													49  140
#													64   204
#													81   285
#													100  385
#
#     b) for i in [1,3,5,7,9]:
#            print(i, ":", i**3)
#        print(i)   
#
#													1 : 1
#													3 : 27
#													5 : 125
#													7 : 343
#													9 : 729
#													9 (print the end of the sequence the largest number of list]
#     c) x = 2
#        y = 10
#        for j in range(0, y, x):
#            print(j, end="")
#            print(x + y)
#       print("done")
#													012
#													212
#													412
#													612
#													812
#													done
#					
#     d) ans = 0
#        for i in range(1,11):
#            ans = ans + i*i
#            print(i)
#        print(ans)
#													1
#													2
#													3
#													...
#													10
#													385 (1+4+9+16+25+36+49+...+100)
#
##  5. What do you think will happen if you use a negative number as the second parameter in the round function? For example, what should be the result 
#	of round(314.159265, -1)? Explain the rational for your answer. After you've written your answer, consult the Python documentation or try out some
#   examples to see what Python actually does in this case.
#		Expected value| Actual value
#			314.15926 | 310.0
#
##  6. What do you think will happen when the operands to the integer division or remainder operations are negative? Consider each of the
#     following cases and try to predict the results. Then try them out in Python.
#     Hint: Recall the magic formula a = (a//b)(b) + (a%b).
#		    		Expected value| Actual value
#     a) -10 // 3				-4
#     b) -10 % 3				not -1 but -2->-12/3
#     c) 10 // -3				-4
#     d) 10 % -3				-2
#     e) -10 // -3				3
#
#### PROGRAMMING EXERCISES

#  1. Write a program to calculate the volume and surface area of a sphere from its radius, given as input. Here are some formulas that might
#     be useful:
#     V = (4/3)3pir^3
#     A = 4pir^2
#	
#
import math
def main():
    print("This is a program calculate volumn and surface area of a sphere")
    r = int(input("Enter the radius of a sphere:"))
    volumn =  (4/3) * 3 * math.pi * r**3
    area = 4 * math.pi * r ** 2
    print("The volumn of the sphere is", volumn)
    print("The surface area of the sphere is", area)
    
main()
##  2. Write a program that calculates the cost per square inch of a circular pizze, given its diameter and price. The formula for area is
#     A = pir^2.
#
import math
def main():
    print("This is a program calculate the cost per")
    print("square inch of a circular pizza")
    r = int(input("What is the diameter of the pizza in inches:")) / 2
    price = float(input("How much is the pizza: "))
    area = math.pi * r ** 2
    cost = price/ area
    print("The cost of the pizza in per square inch is", cost)
    
main()
#  3. Write a program that computes the molecular weight of a carbohydrate (in grams per mole) based on the number of hydrogen, carbon, and oxygen atoms in the
#     molecule. The program should prompt the user to enter the number of hydrogen atomes, the number of carbon atoms, and the number of oxygen atoms. The
#     program then prints the total combined molecular weight of all the atoms based on these individual atom weights:
#                  Atom      Weight
#                            (grams/mole)
#                  ______________________
#                  H         1.00894
#                  C         12.0107
#                  O         15.9994
#     For example, the molecular weight of water (H20) is 2(1.00794) + 15.9994 = 18.01528.
#
def main():
    print("This is a program calculate the molecular weight of a ")
    print("carbohydrate (in grams per mole)")
    h,c,o = eval(input("How many hydrogen, carbon, and oxygen atoms in the molecule:"))
    hydrogen = 1.00894
    carbon = 12.0107
    oxygen = 15.9994
    weight = h* hydrogen +c * carbon + o * oxygen
    print("The molecular weight of the carbonhydrate is", weight)
    
main()
#
#  4. Write a program that determines the distance to a lightning strike based on the time elapsed between the flash and the sound of thunder.
#     The speed of sound is approximately 1100 ft/sec and 1 mile is 5280 ft.

#  5. The Konidtorei coffee shop sells coffee at $10.50 a pound plus the cost of shipping. Each order ships for $.086 per pound + $1.50 fixed cost
#     for overhead. Write a program that calculates the cost of an order.

#  6. Two points in a plane are specified using the coordinates (x1,y1) and (x2,y2). Write a program that calculates the slope of a line through
#     two (non-vertical) points entered by the user.
#                                                   slope = (y2 - y1) / (x2 - x1)

#  7. Write a program that accepts two points (see previous problem) and determins the distance between them.
#     distances = sqrt((x2-x1)^2 + (y2-y1)^2)

#  8. The Gregorian epact is the number of days between Janaury 1st and the previous new moon. This value is used to figure out the date of Easter.
#     It is calculated by these formulas (using int arithmetic):
#                                                               C = year//100
#                                                               epact = (8 + (C//4) - C + ((8C + 13)//25) + 11(year%19))%30

#  9. Write a program to calcualte the area of a triangle given the length of its three sides--a, b, and c--using these formulas:
#                                         s = (a + b + c) / 2
#                                         A = sqrt(s(s - a)(s - b)(s - c))
#     
# 10. Write a program to determine the length of a ladder required to reach a given height when leaned against a house. The height and angle of the
#     ladder are given as inputs. To compute length use:
#                                                       length = height / sin angle
#     Note: The angle must be in radians. Prompt for an angle in degrees and use this formula to convert:
#                                                       radians = (pi / 180) degrees

# 11. Write a program to find the first n natural numbers, where the value of n is provided by the user.

# 12. Write a program to find the sum of the cubes of the first n natural numbers where the value of n is provided by the user.

# 13. Write a program to sum a series of numbers entered by the user. The program should first prompt the user for how many numbers are to be summed.
#     The program should then prompt the user for each of the numbers in turn and print out a total sum after all the numbers have been entered.
#     Hint: Use an input statement in the body of the loop.

# sum.py
# a program that sums up a series of numbers entered by the user

def main():
    number = eval(input("How many numbers are to be summed?")

    for i in number

# 14. Write a program that finds the average of a series of numbers entered by the user. As in the previous problem, the program will first ask the
#     user how many numbers there are. Note: The average should always be a float, even if the user inputs are all ints.

# avg.py
# a progrma that finds the average of a series of numbers entered by the user



# 15. Write a program tha approximates the value of pi by summing the terms of this series:
#     4/1 - 4/3 + 4/5 = 4/7 + 4/9 - 4/11 + ...
#     The program should prompt the user for n, the number of terms to sum, and then output the sum of the first n terms of this series. Have your
#     program subtrac the approximation from the value of math.pi to see how accurate it is.

# 16. A Fibnoacci sequence is a sequence of numbers where each successive number is the sum of the previous two. The classic Fibonacii sequence
#     begins: 1, 1, 2, 3, 5, 8, 13 ... . Write a program that computes the nth Fibonacci number where n is a value input by the user. For example,
#     if n = 6, then the result is 8.



# 17. You have seen that the math library contains a function that computes the square root of numbers. In this exercise, you are to write your own
#     algorithm for computing square roots. One way to solve this problem is to use a guess-and-check approach. You first guess what the square root
#     might be, and then you see how close your guess is. You can use this information to make another guess and continue guessing until you have
#     found the square root (or a close approximation to it). One particularly good way of making guesses is to use Newton's method.
#     Suppose x is the number we want the root of, and guess is the current guessed answer.
#     The guess can be improved by using computing the next guess as:
#                                                                    (guess + (x / guess)) / 2.
#     Write a program that implements Newton's method. The program should prompt the user for the value to find the square root of (x) and the
#     number of times to improve the guess. Starting with a guess value of x/2, your program should loop the specified number of times applying Newton's
#     method and report the final value of guess. You should also subtract your estimate from the value of math.sqrt(x) to show how close it is.





